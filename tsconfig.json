{
    "compilerOptions": {
        /** @DOCS https://www.typescriptlang.org/tsconfig */

        /** Разрешить импортировать файлы JavaScript в ваш проект, а не только файлы .ts и .tsx */
        "allowJs": true,

        /** Позволяет импортировать модули с расширением «.json», что является обычной практикой в ​​проектах Node. 
        * Это включает в себя создание типа на import основе статической формы JSON. */
        "resolveJsonModule": true,

        /** Это может сэкономить время во время компиляции за счет точности системы типов. 
        * Например, две библиотеки могут определять две копии одного и того же type непоследовательным 
        * образом. Вместо того, чтобы выполнять полную проверку всех d.tsфайлов, TypeScript выполнит 
        * проверку кода, на который вы конкретно ссылаетесь в исходном коде вашего приложения. */
        "skipLibCheck": true,

        /** Сообщайте об ошибках для аварийных случаев в операторах switch. Гарантирует, что 
        * любой непустой case внутри оператора switch включает либо , break либо return. 
        * Это означает, что вы случайно не отправите ошибку с ошибкой обращения. */
        "noFallthroughCasesInSwitch": true,

        /** Этот флаг должен включить поддержку более точной реализации того, как современный JavaScript 
        * перебирает новые концепции в старых средах выполнения JavaScript. */
        "downlevelIteration": true,

        /** Компилируем в формат ES5 */
        "target": "es5",

        /** Управляет созданием конструкций JSX в файлах JavaScript. 
        * Это влияет только на вывод файлов JS, которые были запущены в .tsx файлах.
        * react: Выдавать .js файлы с измененным JSX на эквивалентные React.createElement вызовы */
        "jsx": "react",

        /** Позволяет не создавать выходные файлы компилятора, такие как исходный код JavaScript, 
        * исходные карты или объявления, если сообщалось о каких-либо ошибках. */
        "noEmitOnError": true,

        /** Сообщать об ошибках неиспользуемых локальных переменных */
        "noUnusedLocals": true,

        /** Сообщать об ошибках неиспользуемых параметров в функциях */
        "noUnusedParameters": true,

        /** TypeScript будет выдавать ошибку всякий раз, когда он будет неявно выводить any */
        "noImplicitAny": true,

        /** Удаляет все комментарии из файлов TypeScript при преобразовании в JavaScript */
        "removeComments": true,

        /** Устанавливаем модульную систему 
        * @filename: index.ts
        * import { valueOfPi } from "./constants";
        * export const twoPi = valueOfPi * 2;
        *
        * Компилируется в esnext (последняя версия es)
        * import { valueOfPi } from "./constants";
        * export const twoPi = valueOfPi * 2;
        *
        * Пример для CommonJs, будет компилироваться в:
        * "use strict";
        * Object.defineProperty(exports, "__esModule", { value: true });
        * exports.twoPi = void 0;
        * const constants_1 = require("./constants");
        * exports.twoPi = constants_1.valueOfPi * 2;
        */
        "module": "esnext",

        /** Стратегия разрешения модуля */
        "moduleResolution": "node",

        /** Установка isolatedModulesфлага указывает TypeScript предупреждать вас, если вы пишете 
        * определенный код, который не может быть правильно интерпретирован процессом транспиляции 
        * одного файла. */
        "isolatedModules": true,

        /** Позволяет использовать импорт по умолчанию
        * import React from "react";
        * Вместо
        * import * as React from "react"; */
        "allowSyntheticDefaultImports": true,

        /** Этот strict флаг обеспечивает широкий диапазон действий при проверке типов, что приводит 
        * к более сильным гарантиям правильности программы. Включение этого параметра эквивалентно 
        * включению всех параметров семейства строгого режима , которые описаны ниже. 
        * Затем вы можете отключить отдельные семейные проверки в строгом режиме по мере необходимости. */
        "strict": true,

        /** Устраняет проблемы обработки модулей AMD,CommonJs, UMD*/
        "esModuleInterop": true,

        /** Позволяет установить базовый каталог для разрешения неабсолютных имен модулей. */
        "baseUrl": "src",

        /** Ряд записей, которые повторно сопоставляют импорты 
        * с местоположениями поиска относительно файла baseUrl */
        "paths": { 
            "app/*": ["app/*"],
            "pages/*": ["pages/*"],
            "common/*": ["common/*"],
        }
    },
    "exclude": [
        "node_modules"
    ]
}